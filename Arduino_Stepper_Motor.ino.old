// RS Pro 5350401 Motor
// step angle: 0.9Â°

// map pins to pin numbers on board
#define DIR_PIN 2
#define STEP_PIN 3

// for standard C++-like printing
template <typename T>
Print& operator<<(Print& printer, T value)
{
    printer.print(value);
    return printer;
}

// init motor control variables
int motorMode = 1;
int motorDirection = LOW;
bool reset;

// void templateFunction(int duration) {
//     // time keeping to enable multitasking, change millis() to micros() for microsecond timing
//     static uns\igned long chrono = millis();
//     if (millis() - chrono < duration) return;
//     chrono = millis();
//     // main function body here //
// }

void motorNew(int motorMode, int maxDuration, unsigned long optional = 0);

void setup() {
    Serial.begin(115200);           // init serial for communication with board
    pinMode(LED_BUILTIN, OUTPUT);   // enable built-in LED
    pinMode(DIR_PIN, OUTPUT);       // enable pin to control motor direction
    pinMode(STEP_PIN, OUTPUT);      // enable pin to control motor steps

    digitalWrite(DIR_PIN, motorDirection);

    Serial.println(
        "Select option:\n"
        "1. Turn off motor\n"
        "2. Toggle motor direction\n"
        "3. Enable motor: constant velocity\n"
        "4. Enable motor: accelerate\n"
        "5. Enable motor: step"
    );
}

void loop() {
    reset = false;
    if (Serial.available()) {
        userInput();
    }
    motor(motorMode, 100)
}

void motor(int motorMode, int maxDuration, unsigned long optional) {
    // time keeping
    static unsigned long duration = maxDuration;
    static unsigned long chrono = micros();
    if (micros() - chrono < duration) return;
    chrono = micros();

    static int motorState = HIGH;

    switch (motorMode)
    {
    case 1: // constant speed
        motorState = 1 - motorState;
        digitalWrite(STEP_PIN, motorState);
        break;

    case 2: // accelerating
        static int cycle = 200;
        static int minDuration = optional;

        if (cycle <= 0) {
            cycle = 200;
            if (duration > minDuration) {
                duration--;
            }
        }
        cycle--;

        motorState = 1 - motorState;
        digitalWrite(STEP_PIN, motorState);
        break;

    case 3: // step
        static int nSteps = optional;
        static int stepCount = optional;

         Serial.println(stepCount);

        if (stepCount <= 0) {
            // Serial.println("Steps complete");
            motorMode = 0;
        }
        else {
            if (motorState) {
                stepCount--;
            }

            motorState = 1 - motorState;
            digitalWrite(STEP_PIN, motorState);
        }
        break;
    
    default:
        motorState = LOW;
        digitalWrite(STEP_PIN, motorState);
        break;
    }
}

void userInput() {
    int option = Serial.parseInt();
    switch (option)
    {
    case 1: // toggle motor
        motorMode = 0;
        Serial << "Motor off\n";
        break;

    case 2: // toggle motor direction
        // reset motor cycles and retain motorMode value
        reset = true;
        switch (motorMode)
        {
        case 1:
            option = 5;
            break;
        case 2:
            option = 6;
            break;
        default:
            break;
        }

        // alternate between LOW and HIGH for motor direction
        motorDirection = 1 - motorDirection;
        digitalWrite(DIR_PIN, motorDirection);

        Serial << "Motor direction: " << motorDirection << '\n';
        break;

    case 3: // motor with constant velocity
        motorMode = 1;
        Serial << "Motor mode: Constant velocity\n";
        break;

    case 4: // motor with accelerating velocity
        reset = true;
        motorMode = 2;
        Serial << "Motor mode: Accelerating velocity\n";
        break;

    case 5: // step motor
        reset = true;
        motorMode = 3;
        Serial << "Motor mode: Step motor\n";
        break;

    default:
        Serial.println("Error: Please enter a valid input");
    }
}